name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      matrix:
        os: [macos-latest]
        build_type: [Release]
        c_compiler: [clang]
        include:
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v4

    - name: Set up dependencies on macOS
      if: matrix.os == 'macos-latest'
      run: |
        brew update
        brew install --cask clay
        brew install qt@6 protobuf grpc opencv matplotplusplus cmake

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

          - name: Build Server
            run: cmake --build ${{ steps.strings.outputs.build-output-dir }}/Server --config ${{ matrix.build_type }}

          - name: Build Client
            run: cmake --build ${{ steps.strings.outputs.build-output-dir }}/Client --config ${{ matrix.build_type }}

          - name: Test Server
            working-directory: ${{ steps.strings.outputs.build-output-dir }}/Server/test
            run: ./RunTests --build-config ${{ matrix.build_type }}

          - name: Test Client
            working-directory: ${{ steps.strings.outputs.build-output-dir }}/Client/test
            run: ./RunTests --build-config ${{ matrix.build_type }}
      