name: CMake on multiple platforms

on:
  push:
    branches: [ "main", "BETA" ]
  pull_request:
    branches: [ "main", "BETA" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        include:
          - os: macos-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++
          - os: ubuntu-latest
            build_type: Release
            c_compiler: gcc
            cpp_compiler: g++
          - os: ubuntu-latest
            build_type: Release
            c_compiler: clang
            cpp_compiler: clang++

    steps:
    - uses: actions/checkout@v3

    - name: Install Qt
      uses: jurplel/install-qt-action@v2
      with:
        version: '6.6.2'

    - name: Install OpenCV and gRPC
      run: |
        sudo apt-get update
        sudo apt-get install -y libopencv-dev libgrpc++-dev
    
    - name: Install Protobuf
      run: |
        sudo apt-get install -y protobuf-compiler libprotobuf-dev

    - name: Configure Protobuf
      run: |
        export CMAKE_PREFIX_PATH="/usr/lib/x86_64-linux-gnu/cmake/protobuf:${CMAKE_PREFIX_PATH}"
        cmake -B ${{ github.workspace }}/build -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -S ${{ github.workspace }}

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      run: ctest --build-config ${{ matrix.build_type }}